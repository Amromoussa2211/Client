# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main

# jobs:
#   test:
#     runs-on: ubuntu-latest
#     container: null  # Run the job directly on the host machine

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up JDK 17
#         uses: actions/setup-java@v4
#         with:
#           java-version: '17'
#           distribution: 'adopt'

#       - name: Set JAVA_HOME
#         run: export JAVA_HOME=$(java -XshowSettings:properties -version 2>&1 | grep "java.home" | cut -d' ' -f2 | cut -d'=' -f2)

#       - name: Install dependencies
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y libgl1-mesa-glx unzip

#       - name: Download and Install Android Command Line Tools
#         run: |
#           mkdir -p $ANDROID_HOME
#           wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
#           unzip -q cmdline-tools.zip -d $ANDROID_HOME/cmdline-tools
#           mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest
#           rm cmdline-tools.zip
#           echo "export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$PATH" >> $GITHUB_ENV

#       - name: Set ANDROID_SDK_ROOT
#         run: |
#           echo "ANDROID_SDK_ROOT=/usr/local/lib/android/sdk" >> $GITHUB_ENV
#           echo "export ANDROID_SDK_ROOT=/usr/local/lib/android/sdk" >> ~/.bashrc

#       - name: Accept Android SDK Licenses
#         run: |
#           yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses

#       - name: Install Android SDK Components
#         run: |
#           $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-30" "system-images;android-30;google_apis;x86"

#       - name: Verify SDK Installation
#         run: |
#           ls -la $ANDROID_SDK_ROOT
#           ls -la $ANDROID_SDK_ROOT/platform-tools
#           ls -la $ANDROID_SDK_ROOT/platforms

#       - name: Create and Start Emulator
#         run: |
#           echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd --force --name testAVD --package 'system-images;android-30;google_apis;x86' --device 'pixel_5'
#           $ANDROID_HOME/emulator/emulator @testAVD -no-window -no-audio -no-boot-anim -no-snapshot -boot-timeout 500 -qemu -m 1024 -smp 1 &
#           sleep 120  # Wait for emulator to start (increased to 120 seconds)

#       - name: Wait for Emulator
#         run: |
#           $ANDROID_HOME/platform-tools/adb wait-for-device
#           $ANDROID_HOME/platform-tools/adb shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done; input keyevent 82'

#       - name: List ADB Devices
#         run: $ANDROID_HOME/platform-tools/adb devices

#       - name: Download and Install APK
#         run: |
#           mkdir -p apps
#           curl -L -o ./apps/app-release-v15-0.3.2-2024-12-25-18-13.apk https://github.com/Amromoussa2211/client/releases/download/v1.0.0/app-release-v15-0.3.2-2024-12-25-18-13.apk
#           $ANDROID_HOME/platform-tools/adb install -r ./apps/app-release-v15-0.3.2-2024-12-25-18-13.apk

#       - name: Run E2E Tests
#         run: |
#           npm run start:appium &
#           sleep 30  # Increased wait time for Appium to start
#           npm run test:ci

#       - name: Upload test artifacts
#         uses: actions/upload-artifact@v3
#         with:
#           name: test-results
#           path: allure-results
#           if-no-files-found: warn

#       - name: Debug Environment
#         run: |
#           echo $JAVA_HOME
#           echo $ANDROID_HOME
#           echo $ANDROID_SDK_ROOT
#           ls -la

name: Android Test Automation

on:
  push:
    branches:
      - main  # Trigger on push to the main branch
    paths:
      - '**'  # Trigger on any changes in the repository

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      # Step 3: Install Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'  # Use Node.js 18 (or the version you need)
          cache: 'npm'

      # Step 4: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 5: Set up Android SDK
      - name: Set up Android SDK
        run: |
          mkdir -p $ANDROID_HOME
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
          unzip -q cmdline-tools.zip -d $ANDROID_HOME/cmdline-tools
          mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest
          rm cmdline-tools.zip
          echo "export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$PATH" >> $GITHUB_ENV

      # Step 6: Accept Android SDK licenses
      - name: Accept Android SDK licenses
        run: |
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses

      # Step 7: Install required Android SDK components
      - name: Install Android SDK components
        run: |
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-30"

      # Step 8: Set environment variables for the real device
      - name: Set environment variables
        run: |
          echo "DEVICE_NAME=CPH1937" >> $GITHUB_ENV
          echo "UDID=93bb1813" >> $GITHUB_ENV
          echo "APK_PATH=./apps/app-release-v15-0.3.2-2024-12-25-18-13.apk" >> $GITHUB_ENV

      # Step 9: Start Appium server
      - name: Start Appium server
        run: npm run start:appium &

      # Step 10: Wait for Appium to start
      - name: Wait for Appium
        run: sleep 30

      # Step 11: Run tests
      - name: Run tests
        run: npm run test:local

      # Step 12: Generate Allure report
      - name: Generate Allure report
        run: npm run generate-report

      # Step 13: Upload Allure report as an artifact
      - name: Upload Allure report
        uses: actions/upload-artifact@v3
        with:
          name: allure-report
          path: allure-report
          if-no-files-found: warn