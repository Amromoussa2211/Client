name: Android Test Automation

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  android-tests:
    runs-on: ubuntu-latest  # Use Linux runner

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Cache Node.js modules for faster builds
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Set up Android SDK
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: 'latest'
          build-tools-version: '34.0.0'
          platform-version: '30'
          emulator-version: 'latest'
          system-images: 'system-images;android-30;google_apis;x86_64'  # Use x86_64 system image

      # Download APK from GitHub Release
      - name: Download APK
        run: |
          mkdir -p ./apps  # Create the apps directory if it doesn't exist
          curl -L -o ./apps/app-release.apk https://github.com/Amromoussa2211/client/releases/download/v1.0.0/app-release-v15-0.3.2-2024-12-25-18-13.apk

      # Start Android Emulator
      - name: Start Android Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          target: google_apis
          arch: x86_64  # Use x86_64 architecture
          profile: pixel
          emulator-options: "-no-window -no-snapshot -gpu swiftshader_indirect -no-audio -no-boot-anim -no-accel"  # Disable hardware acceleration
          disable-animations: true
          emulator-boot-timeout: 1800  # Increase timeout to 30 minutes
          script: |
            echo "Waiting for emulator to boot..."
            adb wait-for-device
            echo "Emulator is ready!"
            DEVICE=$(adb devices | grep emulator | cut -f1)
            echo "Using device: $DEVICE"
            echo "Waiting for emulator to fully boot..."
            while true; do
              boot_completed=$(adb -s $DEVICE shell getprop sys.boot_completed)
              if [ "$boot_completed" = "1" ]; then
                echo "Emulator is fully booted!"
                break
              fi
              echo "Emulator is still booting..."
              sleep 10
            done
            echo "Installing APK..."
            adb -s $DEVICE install ./apps/app-release.apk
            echo "Running tests..."
            npm run test:ci

      # Debug Emulator
      - name: Debug Emulator
        run: |
          echo "List of connected devices:"
          adb devices
          echo "Emulator logs:"
          cat ~/.android/avd/test.avd/logcat.log

      # Terminate Emulator
      - name: Terminate Emulator
        run: |
          adb -s emulator-5554 emu kill
          sleep 10  # Wait for the emulator to shut down

      # Generate Allure report
      - name: Generate Allure report
        if: success()  # Only run if tests pass
        run: npm run generate-report

      # Upload Allure report as an artifact
      - name: Upload Allure report
        uses: actions/upload-artifact@v3
        with:
          name: allure-report
          path: allure-report/
