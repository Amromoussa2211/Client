name: Android Emulator Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Enable KVM for hardware acceleration
      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      # Step 5: Cache AVD to speed up subsequent runs
      - name: Cache AVD
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-30  # Change this key if the API level changes

      # Step 6: Run tests on Android Emulator
      - name: Run tests on emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim
          script: |
            # Ensure apps directory exists
            mkdir -p apps

            # Download the APK
            curl -L -o ./apps/app-release.apk https://github.com/Amromoussa2211/client/releases/download/v1.0.0/app-release-v15-0.3.2-2024-12-25-18-13.apk

            # Uninstall any previous instance of the app
            adb uninstall com.willma.client.staging || true

            # Install the APK
            adb install ./apps/app-release.apk

            # Wait for the emulator to boot
            adb wait-for-device
            adb shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done;'

            # Start Appium server
            npx appium server --use-plugins element-wait &

            # Wait for Appium to start
            sleep 30  # Adjust if needed

            # Run tests
            npm run test:ci

      # Step 7: Cleanup
      - name: Terminate Emulator and Appium
        if: always()
        run: |
          adb emu kill
          pkill -f appium

      # Step 8: Upload Screenshots on Failure
      - name: Upload Screenshots
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: screenshots
          path: ./screenshots/*.png
