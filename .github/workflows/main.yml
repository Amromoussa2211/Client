name: Android Emulator Setup and Tests

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Enable KVM for hardware acceleration
      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      # Step 3: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18  # Use the Node.js version specified in your project
          cache: 'npm'  # Cache npm dependencies for faster builds

      # Step 4: Install npm dependencies
      - name: Install dependencies
        run: |
          npm install

      # Step 5: Cache Gradle dependencies (optional, if you use Gradle)
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}

      # Step 6: Cache AVD to speed up subsequent runs
      - name: Cache AVD
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-30  # Change this key if the API level changes

      # Step 7: Run tests using the Android Emulator Runner
      - name: Run tests on emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30  # Use the API level you need
          target: google_apis  # Use the target you need (default, google_apis, etc.)
          arch: x86_64  # Use x86_64 for better performance (requires KVM)
          profile: Nexus 6  # Optional: Specify a device profile
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim  # Optimized for CI
          working-directory: /home/runner/work/client/client  # Set the correct working directory
          script: |
            # Create the apps directory if it doesn't exist
            mkdir -p apps

            # Download the APK
            curl -L -o ./apps/app-release.apk https://github.com/Amromoussa2211/client/releases/download/v1.0.0/app-release-v15-0.3.2-2024-12-25-18-13.apk

            # Verify the APK file exists
            if [ ! -f ./apps/app-release.apk ]; then
              echo "APK file not found!"
              exit 1
            fi  # Properly close the 'if' block with 'fi'

            # Install the APK on the emulator
            adb install ./apps/app-release.apk

            # Wait for the emulator to be fully booted
            adb wait-for-device
            adb shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done;'

            # Start Appium server
            npm run start:appium &

            # Wait for Appium to start
            sleep 10

            # Run your tests
            npm run test:ci
